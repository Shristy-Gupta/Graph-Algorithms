//Shortest Distance algorithm
//complexity o(n2)
#include <iostream>
#include <climits>
using namespace std;

int findminvertex(int* distance,bool* visited, int v){
    int minvertex=-1;
    for(int i=0;i<v;i++){
        if(!visited[i] && (minvertex==-1 || distance[i]<distance[minvertex])){
            minvertex=i;
        }
    }
    return minvertex;
}

void dijkstra(int** edges,int v){
    int* distance= new int[v];
    bool* visited=new bool[v];
    for(int i=0;i<v;i++){
       distance[i]=INT_MAX;
       visited[i]=false; 
    }
    distance[0]=0;
    for(int i=0;i<v-1;i++){
        int min_vertex=findminvertex(distance,visited,v);
        visited[min_vertex]=true;
        for(int j=0;j<v;j++){
            if(min_vertex!=-1 && edges[min_vertex][j]!=0 && !visited[j]){
                int dist=edges[min_vertex][j] + distance[min_vertex];
                if(dist<distance[j]){
                    distance[j]=dist;
                }
            }
        }
        
    }
    for(int i=0;i<v;i++){
        cout<<i<<" "<<distance[i]<<endl;
    }
    delete []visited;
    delete []distance;
}


int main() {
    int v,e; cin>>v>>e;
    int** edges=new int*[v];
    for(int i=0;i<v;i++){
        edges[i]=new int[v];
        for(int j=0;j<v;j++){
            edges[i][j]=0;
        }
            
    }
    for(int i=0;i<e;i++){
        int x,y,w; cin>>x>>y>>w;
        edges[x][y]=w;
        edges[y][x]=w; 
    }

    dijkstra(edges,v);
    for(int j=0;j<v;j++){
            delete []edges[j];
        }
    delete []edges;
    
}
