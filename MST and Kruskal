//Spanning Tree --> All the vertices are present 
//Verices-->n
//Edges-->n-1
//MST has minimum weight spanning tree

//Kruskal finds minimum weight MST which is undirected, connected and weighted
//Detect Cycle with UNION FIND Time complexity--> O(V) * Number of edges in MST--> Overall complexity O(v)
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Edge{
    public:
    	int source;
    	int destination;
    	int weight;
};

bool compare(Edge e1, Edge e2){
    return e1.weight<e2.weight;
}
int findParent(int v, int *parent){
    while(parent[v]!=v){
        v=parent[v];
    }
    return v;
}
void kruskals(Edge* input, int n, int E){
    //Sort the Edges in the increasing order of weights
    sort(input,input+E,compare);
    Edge *output=new Edge[n-1];
    int *parent=new int[n];
    for(int i=0;i<n; i++){
        parent[i]=i;
    }
    int num_of_edges_mst=0;
    //inout array travserse
    int i=0;
    while(num_of_edges_mst<n-1){
        Edge currentEdge=input[i++];
        //FInd Union find
        int sourceParent=findParent(currentEdge.source,parent);
        int destinationParent=findParent(currentEdge.destination,parent);
        if(sourceParent!=destinationParent){
            output[num_of_edges_mst++]=currentEdge;
            parent[sourceParent]=destinationParent;
        }
    }
    for(int i=0;i<n-1;i++){
        int source,destination;
        if(output[i].source>output[i].destination){
            source=output[i].destination;
            destination=output[i].source;
        }
        else{
            source=output[i].source;
            destination=output[i].destination;
        }
        cout<<source<<" "<<destination <<" "<<output[i].weight<<endl;
    }
    
}

int main() {
    // vertices and Edges
    int n,E; cin>>n>>E;
    Edge *input=new Edge[E];
    for(int i=0;i<E;i++){
       int source,destination,weight;
       cin>>source>> destination>>weight;
        input[i].source=source;
        input[i].destination=destination;
        input[i].weight=weight;
    }
    kruskals(input,n,E);
}
